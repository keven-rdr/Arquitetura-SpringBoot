spring.application.name=CadastroDeNinjas
# =================================================
# BANCO DE DADOS (PostgreSQL no Docker)
# =================================================
spring.datasource.url=jdbc:postgresql://localhost:5432/ninja_spring_database
spring.datasource.username=postgres
spring.datasource.password=123
spring.datasource.driver-class-name=org.postgresql.Driver
# =================================================
# HIBERNATE (MODO DE DESENVOLVIMENTO)
# =================================================
# 'update': Hibernate vai criar/atualizar as tabelas DENTRO do schema que o Liquibase criar.
spring.jpa.hibernate.ddl-auto=update
# Diz ao Hibernate para colocar tudo no schema 'ninja'.
spring.jpa.properties.hibernate.default_schema=ninja
# Mostrar SQL gerado (ótimo para desenvolvimento)
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
# =================================================
# LIQUIBASE (HABILITADO PARA CRIAR O SCHEMA)
# =================================================
# HABILITE o Liquibase. Ele vai rodar ANTES do Hibernate.
spring.liquibase.enabled=true
# Aponte para o seu arquivo mestre de migrações.
spring.liquibase.change-log=classpath:db/migration/changelog-master.xml
# IMPORTANTE: Diz ao Liquibase para criar suas próprias tabelas de controle (DATABASECHANGELOG)
# no schema 'public' padrão do Postgres. Isso evita conflitos.
spring.liquibase.liquibase-schema=public
# === Keycloak - JWT Resource Server ===
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8081/realms/ninjas
# === Swagger OAuth2 Config ===
springdoc.swagger-ui.oauth2-redirect-url=http://localhost:8080/swagger-ui/oauth2-redirect.html
springdoc.oauth2.authorization-url=http://localhost:8081/realms/ninjas/protocol/openid-connect/auth
springdoc.oauth2.token-url=http://localhost:8081/realms/ninjas/protocol/openid-connect/token
